/* <begin connected objects> */
/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:147
-- healpix_pgrx::moc::CellOrCellRangePSQL
CREATE TYPE CellOrCellRangePSQL AS ENUM (
	'CellPSQL',
	'CellRangePSQL'
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:224
-- healpix_pgrx::moc::CellSelectionPSQL
CREATE TYPE CellSelectionPSQL AS ENUM (
	'All',
	'Inside',
	'Border'
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:171
-- healpix_pgrx::bmoc::Statuspsql
CREATE TYPE Statuspsql AS ENUM (
	'In',
	'Out',
	'Unknown'
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:53
-- healpix_pgrx::bmoc::BMOCpsql
CREATE TYPE BMOCpsql;

-- src/bmoc.rs:53
-- healpix_pgrx::bmoc::bmocpsql_in
CREATE  FUNCTION "bmocpsql_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS BMOCpsql /* core::option::Option<healpix_pgrx::bmoc::BMOCpsql> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'bmocpsql_in_wrapper';

-- src/bmoc.rs:53
-- healpix_pgrx::bmoc::bmocpsql_out
CREATE  FUNCTION "bmocpsql_out"(
	"input" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'bmocpsql_out_wrapper';

-- src/bmoc.rs:53
-- healpix_pgrx::bmoc::BMOCpsql
CREATE TYPE BMOCpsql (
	INTERNALLENGTH = variable,
	INPUT = bmocpsql_in, /* healpix_pgrx::bmoc::bmocpsql_in */
	OUTPUT = bmocpsql_out, /* healpix_pgrx::bmoc::bmocpsql_out */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:140
-- healpix_pgrx::moc::CellOrCellRangeMOCPSQL
CREATE TYPE CellOrCellRangeMOCPSQL;

-- src/moc.rs:140
-- healpix_pgrx::moc::cellorcellrangemocpsql_in
CREATE  FUNCTION "cellorcellrangemocpsql_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS CellOrCellRangeMOCPSQL /* core::option::Option<healpix_pgrx::moc::CellOrCellRangeMOCPSQL> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cellorcellrangemocpsql_in_wrapper';

-- src/moc.rs:140
-- healpix_pgrx::moc::cellorcellrangemocpsql_out
CREATE  FUNCTION "cellorcellrangemocpsql_out"(
	"input" CellOrCellRangeMOCPSQL /* healpix_pgrx::moc::CellOrCellRangeMOCPSQL */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cellorcellrangemocpsql_out_wrapper';

-- src/moc.rs:140
-- healpix_pgrx::moc::CellOrCellRangeMOCPSQL
CREATE TYPE CellOrCellRangeMOCPSQL (
	INTERNALLENGTH = variable,
	INPUT = cellorcellrangemocpsql_in, /* healpix_pgrx::moc::cellorcellrangemocpsql_in */
	OUTPUT = cellorcellrangemocpsql_out, /* healpix_pgrx::moc::cellorcellrangemocpsql_out */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:151
-- healpix_pgrx::moc::CellPSQL
CREATE TYPE CellPSQL;

-- src/moc.rs:151
-- healpix_pgrx::moc::cellpsql_in
CREATE  FUNCTION "cellpsql_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS CellPSQL /* core::option::Option<healpix_pgrx::moc::CellPSQL> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cellpsql_in_wrapper';

-- src/moc.rs:151
-- healpix_pgrx::moc::cellpsql_out
CREATE  FUNCTION "cellpsql_out"(
	"input" CellPSQL /* healpix_pgrx::moc::CellPSQL */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cellpsql_out_wrapper';

-- src/moc.rs:151
-- healpix_pgrx::moc::CellPSQL
CREATE TYPE CellPSQL (
	INTERNALLENGTH = variable,
	INPUT = cellpsql_in, /* healpix_pgrx::moc::cellpsql_in */
	OUTPUT = cellpsql_out, /* healpix_pgrx::moc::cellpsql_out */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:158
-- healpix_pgrx::moc::CellRangePSQL
CREATE TYPE CellRangePSQL;

-- src/moc.rs:158
-- healpix_pgrx::moc::cellrangepsql_in
CREATE  FUNCTION "cellrangepsql_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS CellRangePSQL /* core::option::Option<healpix_pgrx::moc::CellRangePSQL> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cellrangepsql_in_wrapper';

-- src/moc.rs:158
-- healpix_pgrx::moc::cellrangepsql_out
CREATE  FUNCTION "cellrangepsql_out"(
	"input" CellRangePSQL /* healpix_pgrx::moc::CellRangePSQL */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cellrangepsql_out_wrapper';

-- src/moc.rs:158
-- healpix_pgrx::moc::CellRangePSQL
CREATE TYPE CellRangePSQL (
	INTERNALLENGTH = variable,
	INPUT = cellrangepsql_in, /* healpix_pgrx::moc::cellrangepsql_in */
	OUTPUT = cellrangepsql_out, /* healpix_pgrx::moc::cellrangepsql_out */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:52
-- healpix_pgrx::Coo
CREATE TYPE Coo;

-- src/lib.rs:52
-- healpix_pgrx::coo_in
CREATE  FUNCTION "coo_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS Coo /* core::option::Option<healpix_pgrx::Coo> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'coo_in_wrapper';

-- src/lib.rs:52
-- healpix_pgrx::coo_out
CREATE  FUNCTION "coo_out"(
	"input" Coo /* healpix_pgrx::Coo */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'coo_out_wrapper';

-- src/lib.rs:52
-- healpix_pgrx::Coo
CREATE TYPE Coo (
	INTERNALLENGTH = variable,
	INPUT = coo_in, /* healpix_pgrx::coo_in */
	OUTPUT = coo_out, /* healpix_pgrx::coo_out */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:187
-- healpix_pgrx::MainWindMapPSQL
CREATE TYPE MainWindMapPSQL;

-- src/lib.rs:187
-- healpix_pgrx::mainwindmappsql_in
CREATE  FUNCTION "mainwindmappsql_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS MainWindMapPSQL /* core::option::Option<healpix_pgrx::MainWindMapPSQL> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mainwindmappsql_in_wrapper';

-- src/lib.rs:187
-- healpix_pgrx::mainwindmappsql_out
CREATE  FUNCTION "mainwindmappsql_out"(
	"input" MainWindMapPSQL /* healpix_pgrx::MainWindMapPSQL */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mainwindmappsql_out_wrapper';

-- src/lib.rs:187
-- healpix_pgrx::MainWindMapPSQL
CREATE TYPE MainWindMapPSQL (
	INTERNALLENGTH = variable,
	INPUT = mainwindmappsql_in, /* healpix_pgrx::mainwindmappsql_in */
	OUTPUT = mainwindmappsql_out, /* healpix_pgrx::mainwindmappsql_out */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:31
-- healpix_pgrx::moc::RangeMOCPSQL
CREATE TYPE RangeMOCPSQL;

-- src/moc.rs:31
-- healpix_pgrx::moc::rangemocpsql_in
CREATE  FUNCTION "rangemocpsql_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS RangeMOCPSQL /* core::option::Option<healpix_pgrx::moc::RangeMOCPSQL> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'rangemocpsql_in_wrapper';

-- src/moc.rs:31
-- healpix_pgrx::moc::rangemocpsql_out
CREATE  FUNCTION "rangemocpsql_out"(
	"input" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'rangemocpsql_out_wrapper';

-- src/moc.rs:31
-- healpix_pgrx::moc::RangeMOCPSQL
CREATE TYPE RangeMOCPSQL (
	INTERNALLENGTH = variable,
	INPUT = rangemocpsql_in, /* healpix_pgrx::moc::rangemocpsql_in */
	OUTPUT = rangemocpsql_out, /* healpix_pgrx::moc::rangemocpsql_out */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:143
-- healpix_pgrx::UniqTuple
CREATE TYPE UniqTuple;

-- src/lib.rs:143
-- healpix_pgrx::uniqtuple_in
CREATE  FUNCTION "uniqtuple_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS UniqTuple /* core::option::Option<healpix_pgrx::UniqTuple> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'uniqtuple_in_wrapper';

-- src/lib.rs:143
-- healpix_pgrx::uniqtuple_out
CREATE  FUNCTION "uniqtuple_out"(
	"input" UniqTuple /* healpix_pgrx::UniqTuple */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'uniqtuple_out_wrapper';

-- src/lib.rs:143
-- healpix_pgrx::UniqTuple
CREATE TYPE UniqTuple (
	INTERNALLENGTH = variable,
	INPUT = uniqtuple_in, /* healpix_pgrx::uniqtuple_in */
	OUTPUT = uniqtuple_out, /* healpix_pgrx::uniqtuple_out */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:136
-- healpix_pgrx::bmoc::VertexPSQL
CREATE TYPE VertexPSQL;

-- src/bmoc.rs:136
-- healpix_pgrx::bmoc::vertexpsql_in
CREATE  FUNCTION "vertexpsql_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS VertexPSQL /* core::option::Option<healpix_pgrx::bmoc::VertexPSQL> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vertexpsql_in_wrapper';

-- src/bmoc.rs:136
-- healpix_pgrx::bmoc::vertexpsql_out
CREATE  FUNCTION "vertexpsql_out"(
	"input" VertexPSQL /* healpix_pgrx::bmoc::VertexPSQL */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vertexpsql_out_wrapper';

-- src/bmoc.rs:136
-- healpix_pgrx::bmoc::VertexPSQL
CREATE TYPE VertexPSQL (
	INTERNALLENGTH = variable,
	INPUT = vertexpsql_in, /* healpix_pgrx::bmoc::vertexpsql_in */
	OUTPUT = vertexpsql_out, /* healpix_pgrx::bmoc::vertexpsql_out */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:60
-- healpix_pgrx::bmoc::create_bmoc_psql
CREATE  FUNCTION "create_bmoc_psql"(
	"depth_max" INT, /* i32 */
	"entries" bigint[] /* alloc::vec::Vec<i64> */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'create_bmoc_psql_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:102
-- healpix_pgrx::moc::create_range_moc_psql
CREATE  FUNCTION "create_range_moc_psql"(
	"depth_max" INT, /* i32 */
	"ranges" int8range[] /* alloc::vec::Vec<pgrx::datum::range::Range<i64>> */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'create_range_moc_psql_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:225
-- healpix_pgrx::bmoc::hpx_and
CREATE  FUNCTION "hpx_and"(
	"bmoc" BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	"other" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_and_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:35
-- healpix_pgrx::hpx_best_starting_depth
CREATE  FUNCTION "hpx_best_starting_depth"(
	"d_max_deg" double precision /* f64 */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_best_starting_depth_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:157
-- healpix_pgrx::bmoc::hpx_box_coverage
CREATE  FUNCTION "hpx_box_coverage"(
	"depth" INT, /* i32 */
	"lon" double precision, /* f64 */
	"lat" double precision, /* f64 */
	"a" double precision, /* f64 */
	"b" double precision, /* f64 */
	"pa" double precision /* f64 */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_box_coverage_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:64
-- healpix_pgrx::hpx_center
CREATE  FUNCTION "hpx_center"(
	"depth" INT, /* i32 */
	"hash" bigint /* i64 */
) RETURNS Coo /* healpix_pgrx::Coo */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_center_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:117
-- healpix_pgrx::hpx_children
CREATE  FUNCTION "hpx_children"(
	"hash" bigint, /* i64 */
	"delta_depth" INT /* i32 */
) RETURNS int8range /* pgrx::datum::range::Range<i64> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_children_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:118
-- healpix_pgrx::bmoc::hpx_cone_coverage_approx
CREATE  FUNCTION "hpx_cone_coverage_approx"(
	"depth" INT, /* i32 */
	"cone_lon" double precision, /* f64 */
	"cone_lat" double precision, /* f64 */
	"cone_radius" double precision /* f64 */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_cone_coverage_approx_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:190
-- healpix_pgrx::bmoc::hpx_contains
CREATE  FUNCTION "hpx_contains"(
	"bmoc" BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	"lon" double precision, /* f64 */
	"lat" double precision /* f64 */
) RETURNS Statuspsql /* healpix_pgrx::bmoc::Statuspsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_contains_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:196
-- healpix_pgrx::bmoc::hpx_contains_bool
CREATE  FUNCTION "hpx_contains_bool"(
	"bmoc" BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	"lon" double precision, /* f64 */
	"lat" double precision /* f64 */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_contains_bool_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:124
-- healpix_pgrx::bmoc::hpx_elliptical_cone_coverage
CREATE  FUNCTION "hpx_elliptical_cone_coverage"(
	"depth" INT, /* i32 */
	"lon" double precision, /* f64 */
	"lat" double precision, /* f64 */
	"a" double precision, /* f64 */
	"b" double precision, /* f64 */
	"pa" double precision /* f64 */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_elliptical_cone_coverage_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:171
-- healpix_pgrx::hpx_external_edge
CREATE  FUNCTION "hpx_external_edge"(
	"depth" INT, /* i32 */
	"hash" bigint, /* i64 */
	"delta_depth" INT /* i32 */
) RETURNS bigint[] /* alloc::vec::Vec<i64> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_external_edge_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:311
-- healpix_pgrx::bmoc::hpx_flag_one
CREATE  FUNCTION "hpx_flag_one"(
	"bmoc" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS int8range[] /* alloc::vec::Vec<pgrx::datum::range::Range<i64>> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_flag_one_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:301
-- healpix_pgrx::bmoc::hpx_flag_zero
CREATE  FUNCTION "hpx_flag_zero"(
	"bmoc" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS int8range[] /* alloc::vec::Vec<pgrx::datum::range::Range<i64>> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_flag_zero_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:155
-- healpix_pgrx::hpx_from_uniq
CREATE  FUNCTION "hpx_from_uniq"(
	"uniq_hash" bigint /* i64 */
) RETURNS UniqTuple /* healpix_pgrx::UniqTuple */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_from_uniq_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:163
-- healpix_pgrx::hpx_from_zuniq
CREATE  FUNCTION "hpx_from_zuniq"(
	"zuniq" bigint /* i64 */
) RETURNS UniqTuple /* healpix_pgrx::UniqTuple */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_from_zuniq_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:19
-- healpix_pgrx::hpx_hash
CREATE  FUNCTION "hpx_hash"(
	"depth" INT, /* i32 */
	"lon" double precision, /* f64 */
	"lat" double precision /* f64 */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_hash_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:26
-- healpix_pgrx::hpx_hash_range
CREATE  FUNCTION "hpx_hash_range"(
	"depth" INT, /* i32 */
	"lon" double precision, /* f64 */
	"lat" double precision /* f64 */
) RETURNS int8range /* pgrx::datum::range::Range<i64> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_hash_range_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:179
-- healpix_pgrx::hpx_internal_edge
CREATE  FUNCTION "hpx_internal_edge"(
	"depth" INT, /* i32 */
	"hash" bigint, /* i64 */
	"delta_depth" INT /* i32 */
) RETURNS bigint[] /* alloc::vec::Vec<i64> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_internal_edge_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:202
-- healpix_pgrx::hpx_neighbours
CREATE  FUNCTION "hpx_neighbours"(
	"depth" INT, /* i32 */
	"hash" bigint, /* i64 */
	"include_center" bool /* bool */
) RETURNS MainWindMapPSQL /* healpix_pgrx::MainWindMapPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_neighbours_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:209
-- healpix_pgrx::bmoc::hpx_not
CREATE  FUNCTION "hpx_not"(
	"bmoc" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_not_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:43
-- healpix_pgrx::hpx_nside
CREATE  FUNCTION "hpx_nside"(
	"depth" INT /* i32 */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_nside_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:248
-- healpix_pgrx::bmoc::hpx_or
CREATE  FUNCTION "hpx_or"(
	"bmoc" BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	"other" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_or_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:73
-- healpix_pgrx::hpx_parent
CREATE  FUNCTION "hpx_parent"(
	"hash" bigint, /* i64 */
	"delta_depth" INT /* i32 */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_parent_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:146
-- healpix_pgrx::bmoc::hpx_polygon_coverage
CREATE  FUNCTION "hpx_polygon_coverage"(
	"depth" INT, /* i32 */
	"vertices" VertexPSQL[], /* alloc::vec::Vec<healpix_pgrx::bmoc::VertexPSQL> */
	"exact_solution" bool /* bool */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_polygon_coverage_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:163
-- healpix_pgrx::bmoc::hpx_ring_coverage_approx
CREATE  FUNCTION "hpx_ring_coverage_approx"(
	"depth" INT, /* i32 */
	"cone_lon" double precision, /* f64 */
	"cone_lat" double precision, /* f64 */
	"cone_radius_int" double precision, /* f64 */
	"cone_radius_ext" double precision /* f64 */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_ring_coverage_approx_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:95
-- healpix_pgrx::hpx_siblings
CREATE  FUNCTION "hpx_siblings"(
	"depth" INT, /* i32 */
	"hash" bigint /* i64 */
) RETURNS int8range /* pgrx::datum::range::Range<i64> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_siblings_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:322
-- healpix_pgrx::bmoc::hpx_to_ranges
CREATE  FUNCTION "hpx_to_ranges"(
	"bmoc" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS int8range[] /* alloc::vec::Vec<pgrx::datum::range::Range<i64>> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_to_ranges_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:125
-- healpix_pgrx::hpx_to_uniq
CREATE  FUNCTION "hpx_to_uniq"(
	"depth" INT, /* i32 */
	"hash" bigint /* i64 */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_to_uniq_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:134
-- healpix_pgrx::hpx_to_zuniq
CREATE  FUNCTION "hpx_to_zuniq"(
	"depth" INT, /* i32 */
	"hash" bigint /* i64 */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_to_zuniq_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:271
-- healpix_pgrx::bmoc::hpx_xor
CREATE  FUNCTION "hpx_xor"(
	"bmoc" BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	"other" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_xor_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:130
-- healpix_pgrx::bmoc::hpx_zone_coverage
CREATE  FUNCTION "hpx_zone_coverage"(
	"depth" INT, /* i32 */
	"lon_min" double precision, /* f64 */
	"lat_min" double precision, /* f64 */
	"lon_max" double precision, /* f64 */
	"lat_max" double precision /* f64 */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hpx_zone_coverage_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:354
-- healpix_pgrx::moc::moc_and
CREATE  FUNCTION "moc_and"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"other" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_and_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:336
-- healpix_pgrx::moc::moc_complement
CREATE  FUNCTION "moc_complement"(
	"moc" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_complement_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:195
-- healpix_pgrx::moc::moc_degrade
CREATE  FUNCTION "moc_degrade"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"new_depth" INT /* i32 */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_degrade_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:205
-- healpix_pgrx::moc::moc_expanded
CREATE  FUNCTION "moc_expanded"(
	"moc" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_expanded_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:182
-- healpix_pgrx::moc::moc_from_ascii_ivoa
CREATE  FUNCTION "moc_from_ascii_ivoa"(
	"input" TEXT /* &str */
) RETURNS RangeMOCPSQL /* core::result::Result<healpix_pgrx::moc::RangeMOCPSQL, pgrx::spi::SpiError> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_from_ascii_ivoa_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:293
-- healpix_pgrx::moc::moc_from_box
CREATE  FUNCTION "moc_from_box"(
	"lon" double precision, /* f64 */
	"lat" double precision, /* f64 */
	"a" double precision, /* f64 */
	"b" double precision, /* f64 */
	"pa" double precision, /* f64 */
	"depth" INT, /* i32 */
	"selection" CellSelectionPSQL /* healpix_pgrx::moc::CellSelectionPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_from_box_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:243
-- healpix_pgrx::moc::moc_from_cone
CREATE  FUNCTION "moc_from_cone"(
	"lon" double precision, /* f64 */
	"lat" double precision, /* f64 */
	"radius" double precision, /* f64 */
	"depth" INT, /* i32 */
	"delta_depth" INT, /* i32 */
	"selection" CellSelectionPSQL /* healpix_pgrx::moc::CellSelectionPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_from_cone_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:258
-- healpix_pgrx::moc::moc_from_elliptical_cone
CREATE  FUNCTION "moc_from_elliptical_cone"(
	"lon" double precision, /* f64 */
	"lat" double precision, /* f64 */
	"a" double precision, /* f64 */
	"b" double precision, /* f64 */
	"pa" double precision, /* f64 */
	"depth" INT, /* i32 */
	"delta_depth" INT, /* i32 */
	"selection" CellSelectionPSQL /* healpix_pgrx::moc::CellSelectionPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_from_elliptical_cone_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:275
-- healpix_pgrx::moc::moc_from_polygon
CREATE  FUNCTION "moc_from_polygon"(
	"vertices" VertexPSQL[], /* alloc::vec::Vec<healpix_pgrx::bmoc::VertexPSQL> */
	"complement" bool, /* bool */
	"depth" INT, /* i32 */
	"selection" CellSelectionPSQL /* healpix_pgrx::moc::CellSelectionPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_from_polygon_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:309
-- healpix_pgrx::moc::moc_from_ring
CREATE  FUNCTION "moc_from_ring"(
	"lon" double precision, /* f64 */
	"lat" double precision, /* f64 */
	"radius_int" double precision, /* f64 */
	"radius_ext" double precision, /* f64 */
	"depth" INT, /* i32 */
	"delta_depth" INT, /* i32 */
	"selection" CellSelectionPSQL /* healpix_pgrx::moc::CellSelectionPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_from_ring_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:362
-- healpix_pgrx::moc::moc_intersection
CREATE  FUNCTION "moc_intersection"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"other" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_intersection_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:215
-- healpix_pgrx::moc::moc_is_in
CREATE  FUNCTION "moc_is_in"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"lon" double precision, /* f64 */
	"lat" double precision /* f64 */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_is_in_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:447
-- healpix_pgrx::moc::moc_minus
CREATE  FUNCTION "moc_minus"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"other" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_minus_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:329
-- healpix_pgrx::moc::moc_not
CREATE  FUNCTION "moc_not"(
	"moc" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_not_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:387
-- healpix_pgrx::moc::moc_or
CREATE  FUNCTION "moc_or"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"other" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_or_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:127
-- healpix_pgrx::moc::moc_to_ascii
CREATE  FUNCTION "moc_to_ascii"(
	"moc" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS TEXT /* core::result::Result<alloc::string::String, pgrx::spi::SpiError> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_to_ascii_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:115
-- healpix_pgrx::moc::moc_to_ranges
CREATE  FUNCTION "moc_to_ranges"(
	"moc" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS int8range[] /* alloc::vec::Vec<pgrx::datum::range::Range<i64>> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_to_ranges_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:395
-- healpix_pgrx::moc::moc_union
CREATE  FUNCTION "moc_union"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"other" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_union_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:420
-- healpix_pgrx::moc::moc_xor
CREATE  FUNCTION "moc_xor"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"other" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'moc_xor_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:241
-- healpix_pgrx::bmoc::my_bmoc_and
CREATE  FUNCTION "my_bmoc_and"(
	"bmoc" BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	"other" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'my_bmoc_and_wrapper';

-- src/bmoc.rs:241
-- healpix_pgrx::bmoc::my_bmoc_and
CREATE OPERATOR & (
	PROCEDURE="my_bmoc_and",
	LEFTARG=BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	RIGHTARG=BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:264
-- healpix_pgrx::bmoc::my_bmoc_or
CREATE  FUNCTION "my_bmoc_or"(
	"bmoc" BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	"other" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'my_bmoc_or_wrapper';

-- src/bmoc.rs:264
-- healpix_pgrx::bmoc::my_bmoc_or
CREATE OPERATOR | (
	PROCEDURE="my_bmoc_or",
	LEFTARG=BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	RIGHTARG=BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/bmoc.rs:287
-- healpix_pgrx::bmoc::my_bmoc_xor
CREATE  FUNCTION "my_bmoc_xor"(
	"bmoc" BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	"other" BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
) RETURNS BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'my_bmoc_xor_wrapper';

-- src/bmoc.rs:287
-- healpix_pgrx::bmoc::my_bmoc_xor
CREATE OPERATOR ^ (
	PROCEDURE="my_bmoc_xor",
	LEFTARG=BMOCpsql, /* healpix_pgrx::bmoc::BMOCpsql */
	RIGHTARG=BMOCpsql /* healpix_pgrx::bmoc::BMOCpsql */
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:378
-- healpix_pgrx::moc::my_moc_and
CREATE  FUNCTION "my_moc_and"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"other" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'my_moc_and_wrapper';

-- src/moc.rs:378
-- healpix_pgrx::moc::my_moc_and
CREATE OPERATOR & (
	PROCEDURE="my_moc_and",
	LEFTARG=RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	RIGHTARG=RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:465
-- healpix_pgrx::moc::my_moc_minus
CREATE  FUNCTION "my_moc_minus"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"other" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'my_moc_minus_wrapper';

-- src/moc.rs:465
-- healpix_pgrx::moc::my_moc_minus
CREATE OPERATOR - (
	PROCEDURE="my_moc_minus",
	LEFTARG=RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	RIGHTARG=RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:411
-- healpix_pgrx::moc::my_moc_or
CREATE  FUNCTION "my_moc_or"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"other" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'my_moc_or_wrapper';

-- src/moc.rs:411
-- healpix_pgrx::moc::my_moc_or
CREATE OPERATOR | (
	PROCEDURE="my_moc_or",
	LEFTARG=RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	RIGHTARG=RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/moc.rs:438
-- healpix_pgrx::moc::my_moc_xor
CREATE  FUNCTION "my_moc_xor"(
	"moc" RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	"other" RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
) RETURNS RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'my_moc_xor_wrapper';

-- src/moc.rs:438
-- healpix_pgrx::moc::my_moc_xor
CREATE OPERATOR ^ (
	PROCEDURE="my_moc_xor",
	LEFTARG=RangeMOCPSQL, /* healpix_pgrx::moc::RangeMOCPSQL */
	RIGHTARG=RangeMOCPSQL /* healpix_pgrx::moc::RangeMOCPSQL */
);
/* </end connected objects> */

